import serial
import time
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle

class CentrifugeController(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation="vertical", padding=30, spacing=20, **kwargs)

        # Set background color (light blue)
        with self.canvas.before:
            Color(0.8, 0.9, 1, 1)  # Light blue background
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self._update_rect, pos=self._update_rect)

        # Open Serial Connection to Arduino (Update with correct port)
        try:
            self.arduino = serial.Serial('/dev/cu.usbmodem1101', 9600, timeout=1)
            time.sleep(2)  # Wait for connection
        except:
            self.arduino = None
            print("ERROR: Could not connect to Arduino.")

        # Main Layout Sections
        self.main_layout = BoxLayout(orientation='horizontal', spacing=20)
        self.input_section = BoxLayout(orientation='vertical', spacing=10)
        self.status_section = BoxLayout(orientation='vertical', spacing=10)

        # Title
        self.add_widget(Label(
            text="Poverty Centrifuge Controller",
            font_size=50,
            font_name='Roboto-Bold',
            color=(0, 0, 0.5, 1),  # Dark blue title
            bold=True
        ))

        # RPM Input
        self.input_section.add_widget(Label(text="Set Speed (RPM):", font_size=26, font_name='Roboto', color=(0, 0, 0.6, 1)))
        self.rpm_input = TextInput(hint_text="Enter RPM", font_size=24, multiline=False, halign='center')
        self.input_section.add_widget(self.rpm_input)

        # Time Input
        self.input_section.add_widget(Label(text="Set Time (s):", font_size=26, font_name='Roboto', color=(0, 0, 0.6, 1)))
        self.time_input = TextInput(hint_text="Enter Time in Seconds", font_size=24, multiline=False, halign='center')
        self.input_section.add_widget(self.time_input)

        # Start Button
        self.start_button = Button(
            text="Start",
            font_size=26,
            font_name='Roboto-Bold',
            background_color=(1, 0.4, 0, 1),  # Orange button
            color=(1, 1, 1, 1),  # White text
            bold=True
        )
        self.start_button.bind(on_press=self.send_to_arduino)
        self.input_section.add_widget(self.start_button)

        # Status Labels
        self.status_section.add_widget(Label(text="Status: Idle", font_size=26, font_name='Roboto', color=(0, 0, 0.6, 1)))
        self.status_section.add_widget(Label(text="Current Speed: --- RPM", font_size=26, font_name='Roboto', color=(0, 0, 0.6, 1)))
        self.status_section.add_widget(Label(text="Time Left: --- s", font_size=26, font_name='Roboto', color=(0, 0, 0.6, 1)))

        # Add sections to main layout
        self.main_layout.add_widget(self.input_section)
        self.main_layout.add_widget(self.status_section)
        self.add_widget(self.main_layout)

        # Start listening for Arduino updates
        Clock.schedule_interval(self.read_from_arduino, 1)

    def _update_rect(self, instance, value):
        """ Update the background size when the window resizes """
        self.rect.size = instance.size
        self.rect.pos = instance.pos

    def send_to_arduino(self, instance):
        rpm = self.rpm_input.text
        time_sec = self.time_input.text

        if not rpm.isdigit() or not time_sec.isdigit() or int(rpm) <= 0 or int(time_sec) <= 0:
            self.status_section.children[2].text = "Status: Invalid Input"
            self.status_section.children[2].color = (1, 0, 0, 1)  # Red text
            return

        command = f"{rpm} {time_sec}\n"

        if self.arduino:
            self.arduino.write(command.encode())
            self.status_section.children[2].text = "Status: Running"
            self.status_section.children[2].color = (0, 1, 0, 1)  # Green
            self.status_section.children[1].text = f"Current Speed: {rpm} RPM"
            self.status_section.children[0].text = f"Time Left: {time_sec} s"

    def read_from_arduino(self, dt):
        if self.arduino and self.arduino.in_waiting > 0:
            data = self.arduino.readline().decode().strip()

            print(f"Received data: {data}")  # Debug: Check received data

            if data.startswith("UPDATE"):
                parts = data.split()
                if len(parts) == 3:
                    _, rpm, time_left = parts
                    print(f"Parsed RPM: {rpm}, Time Left: {time_left}")  # Debug: Check parsed data
                    self.status_section.children[1].text = f"Current Speed: {rpm} RPM"
                    self.status_section.children[0].text = f"Time Left: {time_left} s"

            elif data == "DONE":
                self.status_section.children[2].text = "Status: Idle"
                self.status_section.children[2].color = (0, 0, 0.6, 1)  # Dark blue
                self.status_section.children[1].text = "Current Speed: --- RPM"
                self.status_section.children[0].text = "Time Left: --- s"

class CentrifugeApp(App):
    def build(self):
        return CentrifugeController()

if __name__ == "__main__":
    CentrifugeApp().run()
