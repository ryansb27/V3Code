import serial
import time
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle


class CentrifugeController(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation="vertical", padding=20, spacing=10, **kwargs)

        # Set white background
        with self.canvas.before:
            Color(1, 1, 1, 1)  # White background
            self.rect = Rectangle(size=self.size, pos=self.pos)

        self.bind(size=self._update_rect, pos=self._update_rect)

        # Open Serial Connection to Arduino (Update with correct port)
        try:
            self.arduino = serial.Serial('/dev/tty.usbmodem101', 9600, timeout=1)  # Change COM port if needed
            time.sleep(2)  # Wait for connection
        except:
            self.arduino = None
            print("ERROR: Could not connect to Arduino.")

        # Title
        self.add_widget(Label(text="Centrifuge Controller", font_size=24, color=(0, 0, 0, 1)))

        # RPM Input
        self.add_widget(Label(text="Set Speed (RPM):", font_size=18, color=(0, 0, 0, 1)))
        self.rpm_input = TextInput(hint_text="Enter RPM", font_size=18, multiline=False)
        self.add_widget(self.rpm_input)

        # Time Input
        self.add_widget(Label(text="Set Time (s):", font_size=18, color=(0, 0, 0, 1)))
        self.time_input = TextInput(hint_text="Enter Time in Seconds", font_size=18, multiline=False)
        self.add_widget(self.time_input)

        # Start Button
        self.start_button = Button(text="Start", font_size=18, background_color=(0.6, 0.6, 0.6, 1))
        self.start_button.bind(on_press=self.send_to_arduino)
        self.add_widget(self.start_button)

        # Status Labels
        self.status_label = Label(text="Status: Idle", font_size=18, color=(0, 0, 0, 1))
        self.add_widget(self.status_label)

        self.current_rpm_label = Label(text="Current Speed: --- RPM", font_size=18, color=(0, 0, 0, 1))
        self.add_widget(self.current_rpm_label)

        self.time_left_label = Label(text="Time Left: --- s", font_size=18, color=(0, 0, 0, 1))
        self.add_widget(self.time_left_label)

        # Start listening for Arduino updates
        Clock.schedule_interval(self.read_from_arduino, 1)

    def _update_rect(self, instance, value):
        """ Update the background size when the window resizes """
        self.rect.size = instance.size
        self.rect.pos = instance.pos

    def send_to_arduino(self, instance):
        rpm = self.rpm_input.text
        time_sec = self.time_input.text

        if not rpm.isdigit() or not time_sec.isdigit() or int(rpm) <= 0 or int(time_sec) <= 0:
            self.status_label.text = "Status: Invalid Input"
            self.status_label.color = (1, 0, 0, 1)  # Red text
            return

        command = f"{rpm} {time_sec}\n"

        if self.arduino:
            self.arduino.write(command.encode())
            self.status_label.text = "Status: Running"
            self.status_label.color = (0, 1, 0, 1)  # Green
            self.current_rpm_label.text = f"Current Speed: {rpm} RPM"
            self.time_left_label.text = f"Time Left: {time_sec} s"

    def read_from_arduino(self, dt):
        if self.arduino and self.arduino.in_waiting > 0:
            data = self.arduino.readline().decode().strip()

            if data.startswith("UPDATE"):
                parts = data.split()
                if len(parts) == 3:
                    _, rpm, time_left = parts
                    self.current_rpm_label.text = f"Current Speed: {rpm} RPM"
                    self.time_left_label.text = f"Time Left: {time_left} s"

            elif data == "DONE":
                self.status_label.text = "Status: Idle"
                self.status_label.color = (0, 0, 0, 1)  # Black
                self.current_rpm_label.text = "Current Speed: --- RPM"
                self.time_left_label.text = "Time Left: --- s"


class CentrifugeApp(App):
    def build(self):
        return CentrifugeController()


if __name__ == "__main__":
    CentrifugeApp().run()
