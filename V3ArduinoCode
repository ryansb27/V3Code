#include <Wire.h>

const int motorPin = 9;  // PWM pin for motor control
const int sensorPin = 7; // Interrupt pin for phototransistor output

volatile unsigned long pulseCount = 0;
unsigned long prevTime = 0;
float rpm = 0;
int outputPWM = 0;
int targetRPM = 0;
int runTime = 0;  
unsigned long startTime = 0;
bool motorRunning = false;
float Kp = 0.05;

void rpmISR() {
    pulseCount++;
}

void setup() {
    Serial.begin(9600);
    pinMode(motorPin, OUTPUT);
    pinMode(sensorPin, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(sensorPin), rpmISR, FALLING);

    Serial.println("Ready for input: [RPM] [Time]");
}

void loop() {
    if (Serial.available() > 0 && !motorRunning) {
        targetRPM = Serial.parseInt();
        //targetRPM = targetRPM * 1.7;  // Adjust target RPM if needed
        runTime = Serial.parseInt();

        if (targetRPM <= 0 || runTime <= 0) {
            Serial.println("Invalid input");
            return;
        }

        startTime = millis();
        motorRunning = true;
        analogWrite(motorPin, 75);  // Start the motor
        Serial.println("Motor started");
    }

    if (motorRunning) {
        if (millis() - prevTime >= 1000) {
            noInterrupts();
            float timeElapsed = (millis() - prevTime);  // Calculate time elapsed in minutes
            rpm = (pulseCount / 2.0) * 60;  // Calculate RPM based on pulses per minute
            pulseCount = 0;
            prevTime = millis();
            interrupts();

            float error = targetRPM - rpm;
            outputPWM = constrain(outputPWM + (Kp * error), 0, 255);  // Adjust PWM to match target RPM
            analogWrite(motorPin, outputPWM);

            // Calculate time left in seconds
            int timeLeft = runTime - (millis() - startTime) / 1000;

            // Send update to Kivy app
            Serial.print("UPDATE ");
            Serial.print(rpm);
            Serial.print(" ");
            Serial.println(timeLeft);  // Send time left to the Kivy GUI
        }

        // Stop motor when run time is reached
        if ((millis() - startTime) / 1000 >= runTime) {
            analogWrite(motorPin, 0);  // Stop motor
            motorRunning = false;
            Serial.println("Done");
        }
    }
}
